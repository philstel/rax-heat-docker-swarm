heat_template_version: 2013-05-23

description: >
  This template will boot a Docker swarm cluster. A swarm cluster is made up
  of a single manager node, and N agent nodes. Every node in the cluster,
  including the manager, is running a Docker daemon and a swarm agent
  advertising it to the cluster. The manager is running an addition swarm
  manager container listening on port 2376. By default, the cluster is made
  up of one manager node and one agent node.

parameters:

  #
  # REQUIRED PARAMETERS
  #
  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: os_acando

  swarm_token:
    type: string
    description: identifier of swarm cluster to build

  #
  # OPTIONAL PARAMETERS
  #
  server_image:
    type: string
    default: 05438eb5-af42-4bdd-bd32-309c2154927d
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: performance1-2
    description: flavor to use when booting the server

  number_of_nodes:
    type: string
    description: how many swarm nodes to spawn
    default: 1
  
  external_network_id:
    type: string
    description: the public network on which the floating ip is allocated
    default: public

  internal_network_id:
    type: string
    description: the internal network on which the swarm communicates
    default: private


resources:

  start_swarm_manager_service:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash
            echo "Running boot script for the Swarm Manager with Docker Swarm Token $SWARM_TOKEN"
            docker run -d -p 3376:3376 --net="host" -t swarm manage -H 0.0.0.0:3376 token://$SWARM_TOKEN
          params:
            "$SWARM_TOKEN": {get_param: swarm_token}

  ######################################################################
  #
  # Swarm_manager is a special node running the swarm manage daemon along
  # side the swarm agent.
  #

  swarm_manager:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data: {get_resource: start_swarm_manager_service}
      networks:
        - port:
            get_resource: swarm_manager_eth0

  swarm_manager_eth0:
    type: "OS::Neutron::Port"
    properties:
      network: { get_param: internal_network_id }
      fixed_ips:
        - subnet_id: {get_param: internal_network_id }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network_id }

  association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: swarm_manager_eth0 }

outputs:
  swarm_manager_private_ip:
    value: {get_attr: [swarm_manager, networks, public, 0]}

  swarm_manager_public_ip:
    value: {get_attr: [floating_ip, floating_ip_address]}
