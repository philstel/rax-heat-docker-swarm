heat_template_version: 2015-10-15

description: >
  This is a nested stack that defines a single swarm node,
  based on a vanilla Fedora 20 cloud image.  This stack is included by
  a ResourceGroup resource in the parent template (swarm.yaml).

parameters:

  server_image:
    type: string
    default: UbuntuWithDocker2
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: phil_key

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  internal_network_id:
    type: string
    description: Network from which to allocate fixed addresses.

  swarm_token:
    type: string
    description: token of swarm cluster to build

resources:
  
######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.

  start_swarm_agent_service:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/bash
            echo "Running boot script for $NODE_IP with Docker Swarm Token $SWARM_TOKEN"
            service docker stop
            rm /etc/docker/key.json
            docker daemon -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock &
            docker run -d --net="host" swarm join --addr=$NODE_IP:2375 token://$SWARM_TOKEN
          params:
            "$NODE_IP": {get_attr: [instance_port, fixed_ips, 0, ip_address]}
            "$SWARM_TOKEN": {get_param: swarm_token}

  swarm_node_init:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: start_swarm_agent_service}

  swarm_node:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data: { get_resource: swarm_node_init }
      networks:
        - port: { get_resource: instance_port }

  instance_port:
    type: OS::Neutron::Port
    properties:
      network: private
      fixed_ips:
        - subnet_id: {get_param: internal_network_id}

outputs:

  swarm_node_ip:
    value: {get_attr: [instance_port, fixed_ips, 0, ip_address]}
